import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, LSTM
from tensorflow.keras.optimizers import Adam
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix, classification_report

# Load your dataset into a pandas DataFrame
data = pd.read_csv('articles_data.csv')

# Preprocessing the data
X = data[['engagement_reaction_count', 'engagement_comment_count', 'engagement_share_count']].values
y = data['top_article'].values

# Feature scaling
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Reshape input data for LSTM (assuming each row represents a time step)
X_lstm = X.reshape((X.shape[0], 1, X.shape[1]))

# Splitting the data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X_lstm, y, test_size=0.2, random_state=42)

# Create a single LSTM model
model_lstm = Sequential([
    LSTM(128, input_shape=(X_train.shape[1], X_train.shape[2]), activation='relu', return_sequences=True),
    Dropout(0.5),
    LSTM(64, activation='relu'),
    Dense(1, activation='sigmoid')
])

# Compile the model
model_lstm.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=['accuracy'])

# Train the model
model_lstm.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_val, y_val), verbose=1)

# Generate predictions on validation data
y_pred_prob = model_lstm.predict(X_val)

# Threshold probabilities to get binary predictions
y_pred = (y_pred_prob > 0.5).astype(int)

# Calculate accuracy
accuracy = accuracy_score(y_val, y_pred)
precision = precision_score(y_val, y_pred)
recall = recall_score(y_val, y_pred)
f1 = f1_score(y_val, y_pred)
roc_auc = roc_auc_score(y_val, y_pred)
conf_matrix = confusion_matrix(y_val, y_pred)
class_report = classification_report(y_val, y_pred)

# Display performance metrics
print(f"Accuracy: {accuracy * 100:.2f}%")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1-Score: {f1:.4f}")
print(f"ROC-AUC: {roc_auc:.4f}")
print(f"Confusion Matrix:\n{conf_matrix}")
print(f"Classification Report:\n{class_report}")
