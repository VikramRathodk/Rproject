# # import pandas as pd

# # def popularity_based_ranking(df):
# #     # Calculate a popularity score by summing up the engagement counts
# #     engagement_columns = ['engagement_reaction_count', 'engagement_comment_count', 'engagement_share_count']
# #     df['popularity_score'] = df[engagement_columns].sum(axis=1)

# #     # Sort articles by popularity score in descending order
# #     df_sorted_by_popularity = df.sort_values(by='popularity_score', ascending=False)

# #     # Return the sorted DataFrame or specific results as needed
# #     return df_sorted_by_popularity[['title', 'popularity_score']].head(10)

# import pandas as pd

# def weighted_popularity_ranking(df):
#     # Define weights for different engagement types
#     weights = {
#         'engagement_reaction_count': 1,
#         'engagement_comment_count': 2,  # Assuming comments are more valuable
#         'engagement_share_count': 1.5  # Shares are considered more impactful
#     }

#     # Calculate weighted popularity score
#     df['weighted_popularity_score'] = (
#         df['engagement_reaction_count'] * weights['engagement_reaction_count'] +
#         df['engagement_comment_count'] * weights['engagement_comment_count'] +
#         df['engagement_share_count'] * weights['engagement_share_count']
#     )

#     # Sort articles by weighted popularity score in descending order
#     df_sorted_by_weighted_popularity = df.sort_values(
#         by='weighted_popularity_score', ascending=False
#     )

#     # Return the sorted DataFrame or specific results as needed
#     return df_sorted_by_weighted_popularity[['title', 'weighted_popularity_score']].head(10)

# # Load your dataset 'articles_data.csv'
# df = pd.read_csv('../data/articles_data.csv')

# # Call the function to get the top articles ranked by weighted popularity score
# top_articles_weighted = weighted_popularity_ranking(df)

# # Display or further process the top articles ranked by weighted popularity score
# print(top_articles_weighted)


import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer

def weighted_popularity_ranking(df):
    # Placeholder function for weighted popularity ranking
    # Replace this with your actual implementation for calculating popularity scores and ranking articles
    weights = {
        'engagement_reaction_count': 1,
        'engagement_comment_count': 2,
        'engagement_share_count': 2
    }

    # Calculate weighted popularity score
    df['weighted_popularity_score'] = (
        df['engagement_reaction_count'] * weights['engagement_reaction_count'] +
        df['engagement_comment_count'] * weights['engagement_comment_count'] +
        df['engagement_share_count'] * weights['engagement_share_count']
    )

    # Sort articles by weighted popularity score in descending order
    df_sorted_by_weighted_popularity = df.sort_values(
        by='weighted_popularity_score', ascending=False
    )

    # Return the sorted DataFrame or specific results as needed
    return df_sorted_by_weighted_popularity[['title', 'weighted_popularity_score']].head(10)


# import pandas as pd
# from sklearn.feature_extraction.text import TfidfVectorizer

# def tfidf_ranking(df):
#     # Handle NaN values in 'title' column by filling them with an empty string
#     df['title'].fillna('', inplace=True)

#     # Extract other features along with 'title' for ranking
#     features_to_include = ['engagement_reaction_count', 'engagement_comment_count', 'engagement_share_count']

#     # Select desired features along with the title
#     features_df = df[['title'] + features_to_include]

#     # Perform TF-IDF on the 'title' column
#     tfidf = TfidfVectorizer(max_features=5000)
#     tfidf_matrix = tfidf.fit_transform(df['title'])

#     # Get feature names generated by TF-IDF
#     feature_names = tfidf.get_feature_names_out()

#     # Calculate TF-IDF scores for each title
#     tfidf_scores = tfidf_matrix.max(axis=1).toarray().flatten()  # Get maximum TF-IDF score for each article

#     # Create a DataFrame with 'title', TF-IDF scores, and additional features
#     df_tfidf = pd.DataFrame({'title': df['title'], 'tfidf_score': tfidf_scores})
#     for feature in features_to_include:
#         df_tfidf[feature] = features_df[feature]

#     # Sort by TF-IDF scores and return the top 10 articles with all included features
#     df_tfidf_sorted = df_tfidf.sort_values(by='tfidf_score', ascending=False).head(20)

#     return df_tfidf_sorted
